{% extends "base.hbs" %}
{% block title %} UST intranet | Docházková karta {%end%}
{% block body %}

<script src="https://unpkg.com/moment@2.24.0/moment.js"></script>
<script src="https://unpkg.com/moment@2.24.0/locale/cs.js"></script>

<style>
    input[type=date], input[type=time] {
        border-style: solid;
        border-width: thin;
        border-color: #aaaaaa;
    }

    .row-delete-btn {
        padding-bottom: 0;
        padding-top: 0;
    }

    #vacations table td:nth-child(3) {
        text-align: center;
    }

    #work-spans table td:nth-child(5) {
        text-align: center;
    }

    .calendar-month-title {
        text-transform: capitalize;
    }

    .table td.calendar-cell {
        padding: 0;
        height: 49px;
    }

    .calendar-cell-container {
        display: table;
        height: 100%;
        width: 100%;
        position: relative;
        vertical-align: middle;
        cursor: pointer;
    }

    .calendar-other-month {
        opacity: 40%;
    }

    .calendar-day-span {
        font-size: 12px;
        position: absolute;
        top: 0;
        right: 0;
        padding-right: 3px;
        font-weight: bold;
    }

    .calendar-content-span {
        display: table-cell;
        vertical-align: middle;
        text-align: center;
        font-weight: bold;
    }

    .calendar-circle {
        border-radius: 16px;
        width: 32px;
        height: 32px;
        display: inline-block;
        color: white;
        padding-top: 3px;
    }

    .calendar-circle.calendar-hours {
        background: rgb(33, 37, 41);
    }

    .calendar-circle.calendar-vacation {
        background: green;
    }

</style>

<div class="container">
    <h1>Docházková karta: <a href="/users/u/{{_id}}">{{name}}</a></h1>

    <div class="row">
        <div class="col col-12 col-lg-6">
            <div id="calendar">
                <table class="table text-center table-bordered" style="table-layout: fixed" id="calendar-table">
                </table>
            </div>

            <div id="vacations">
                <table class="table">
                    <thead class="thead-dark">
                    <tr>
                        <th colspan="4">Dovolená</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <th>Od</th>
                        <th>Do</th>
                        <th></th>
                    </tr>
                    {% for vacation in vacations %}
                    <tr>
                        <td>{{vacation["from"]}}</td>
                        <td>{{vacation["to"]}}</td>
                        <td>
                            <button class="btn btn-sm btn-secondary row-delete-btn" data-id="{{vacation['_id']}}"
                                    onclick="deleteVacation(this)">
                                &times;
                            </button>
                        </td>
                    </tr>
                    {% end %}
                    <tr>
                        <td><input type="date" style="width: 150px" id="vacation-from"></td>
                        <td><input type="date" style="width: 150px" id="vacation-to"></td>
                        <td>
                            <button class="btn btn-secondary" onclick="saveVacation()">Přidat</button>
                        </td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="col col-12 col-lg-6">
            <div id="month-info">
                <table class="table">
                    <thead class="thead-dark">
                    <tr>
                        <th>Informace o měsíci</th>
                        <th class="text-right">
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>Počet odpracovaných hodin</td>
                        <td>{{month_hours_worked}}</td>
                    </tr>
                    <tr>
                        <td>Maximální počet hodin v měsíci</td>
                        <td>{{month_max_hours or '-'}}</td>
                    </tr>
                    <tr>
                        <td>Chybí vyčerpat</td>
                        <td>{{month_available_hours or '-'}}</td>
                    </tr>
                    <tr>
                        <td>Za měsíc hrubého</td>
                        <td>{{month_money_made or '-'}} Kč</td>
                    </tr>
                    <tr>
                        <td>Za měsíc vyplacená částka</td>
                        <td>-</td>
                    </tr>
                    <tr>
                        <td>Hodinová mzda</td>
                        <td>{{hour_rate or '-'}} Kč</td>
                    </tr>
                    <tr>
                        <td>Platba daně</td>
                        <td>-</td>
                    </tr>
                    <tr>
                        <td>Vyčerpáno hodin v roce</td>
                        <td>{{year_hours_worked}}</td>
                    </tr>
                    <tr>
                        <td>Volné hodiny do konce roku</td>
                        <td>{{year_available_hours or '-'}}</td>
                    </tr>
                    <tr>
                        <td>Dny dovolené v tomto roce</td>
                        <td>{{year_days_of_vacation}}</td>
                    </tr>
                    <tr>
                        <td colspan="2" class="text-center">
                            <button class="btn btn-primary">Uzavřít měsíc</button>
                        </td>
                    </tr>

                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div id="work-spans">
                <table class="table">
                    <thead class="thead-dark">
                    <tr>
                        <th colspan="5">{{date_pretty if date_pretty else "nic"}}</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <th>Od</th>
                        <th>Do</th>
                        <th>Počet hodin</th>
                        <th>Projekt</th>
                        <th></th>
                    </tr>
                    {% for workspan in workspans %}
                    <tr>
                        <td>
                            {{workspan["from"]}}
                        </td>
                        <td>{{workspan["to"]}}</td>
                        <td>{{workspan["hours"]}}</td>
                        <td>{{workspan["assignment"]}}</td>
                        <td>
                            <button class="btn btn-sm btn-secondary row-delete-btn" data-id="{{workspan['_id']}}"
                                    onclick="deleteWorkspan(this)">
                                &times;
                            </button>
                        </td>
                    </tr>
                    {% end %}
                    {% if is_vacation_day %}
                    <tr>
                        <td colspan="5" style="text-align: center;">Na dovolené se nepracuje.</td>
                    </tr>
                    {% else %}
                    <tr>
                        <td><input class="workspan-from" type="time" step="1800"></td>
                        <td><input class="workspan-to" type="time" step="1800"></td>
                        <td><input class="workspan-hours" type="number" style="width: 50px"
                                   min="0" max="12" step="0.5"></td>
                        <td>
                            <select class="workspan-assignment" style="border-width: thin; width: 200px">
                                <option value="hmm">Pracovat</option>
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-secondary" onclick="saveWorkSpan(this)">Přidat</button>
                        </td>
                    </tr>
                    {% end %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<script>

    class Calendar {

        constructor(tableElement, dateSelected, monthShown) {
            this.dateSelectedChangeEvent = new CustomEvent("dateSelectedChange");
            this.monthShownChangeEvent = new CustomEvent("monthShownChange");

            this.CALENDAR_ROWS = 6;
            this.CALENDAR_COLS = 7;

            this._dateSelected = dateSelected;
            this._monthShown = monthShown;
            this.table = tableElement;

            this._buildCalendar();
            this._connectButtonsEvents();

            this.table.addEventListener("monthShownChange", () => {
                console.log("event monthShownChange");
                this._updateMonthTitle();
                this.populateCalendar();
            });

            this.table.dispatchEvent(this.dateSelectedChangeEvent);
            this.table.dispatchEvent(this.monthShownChangeEvent);
        }

        get dateSelected() {
            return moment(this._dateSelected);
        }

        set dateSelected(value) {
            this._dateSelected = moment(value);
            this.table.dispatchEvent(this.dateSelectedChangeEvent);
        }

        get monthShown() {
            return moment(this._monthShown);
        }

        set monthShown(value) {
            this._monthShown = moment(value);
            this.table.dispatchEvent(this.monthShownChangeEvent);
        }

        _updateMonthTitle() {
            let monthTitleElem = this.table.getElementsByClassName("calendar-month-title")[0];
            monthTitleElem.innerHTML = this.monthShown.format("MMMM YYYY");
        }

        _buildCalendar() {
            this.table.innerHTML = `
                <thead class="thead-dark">
                    <tr>
                        <th colspan="7" class="text-left">
                            <h4 style="display: inline; float: left;" class="calendar-month-title"></h4>
                            <span style="float: right">
                                <button type="button" class="btn btn-light calendar-previous-month-btn">
                                    Předchozí měsíc
                                </button>
                                <button type="button" class="btn btn-light calendar-next-month-btn">
                                    Následující měsíc
                                </button>
                            </span>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>Po</th>
                        <th>Út</th>
                        <th>St</th>
                        <th>Čt</th>
                        <th>Pá</th>
                        <th>So</th>
                        <th>Ne</th>
                    </tr>
                </tbody>`

            let tableBody = this.table.getElementsByTagName("tbody")[0];

            for (let row = 0; row < this.CALENDAR_ROWS; row++) {
                let tr = document.createElement("tr");

                for (let col = 0; col < this.CALENDAR_COLS; col++) {
                    let td = document.createElement("td");

                    let cellClass = this._getCellClass(row, col);
                    td.classList.add(cellClass);
                    td.classList.add("calendar-cell");
                    td.dataset.date = "";
                    td.addEventListener("click", () => {
                        this._cellClickHandler(td);
                    });

                    tr.appendChild(td);
                }
                tableBody.appendChild(tr);
            }
        }

        _connectButtonsEvents() {
            let previousButton = this.table.getElementsByClassName("calendar-previous-month-btn")[0];
            let nextButton = this.table.getElementsByClassName("calendar-next-month-btn")[0];

            previousButton.addEventListener("click", () => {
                this.previousMonth()
            });
            nextButton.addEventListener("click", () => {
                this.nextMonth()
            });
        }

        _ajaxMonthData() {
            $.ajax({
                context: this,
                url: "/attendance/api/u/{{_id}}/calendar/date/" + this.monthShown.format("YYYY-MM-DD"),
                type: "post",
                success: function (response, this_ = this) {
                    this.populateCalendar(JSON.parse(response));
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus, errorThrown);
                    alert("Serveru se něco nelíbí.")
                }
            });
        }

        populateCalendar(ajaxData) {
            console.log(ajaxData);
            if (typeof ajaxData === "undefined") this._ajaxMonthData();

            let lastMonth = this.monthShown.subtract(1, "months");
            let nextMonth = this.monthShown.add(1, "months");

            let firstDay = this.monthShown.day();
            let daysInMonth = this.monthShown.daysInMonth();
            let daysInLastMonth = lastMonth.daysInMonth();

            let lastMonthDaysCounter = daysInLastMonth - (firstDay - 1) + 1;
            let thisMonthDaysCounter = 1;
            let nextMonthDaysCounter = 1;

            for (let row = 0; row < this.CALENDAR_ROWS; row++) {
                for (let col = 0; col < this.CALENDAR_COLS; col++) {
                    let cellClass = this._getCellClass(row, col);
                    let cell = this.table.getElementsByClassName(cellClass)[0];

                    let day = "";
                    let date = "";
                    let otherMonth = true;
                    if (lastMonthDaysCounter <= daysInLastMonth) {
                        day = lastMonthDaysCounter;
                        date = moment(lastMonth).set("date", day);
                        lastMonthDaysCounter++;
                    } else if (thisMonthDaysCounter <= daysInMonth) {
                        day = thisMonthDaysCounter;
                        date = this.monthShown.set("date", day);
                        thisMonthDaysCounter++;
                        otherMonth = false;
                    } else {
                        day = nextMonthDaysCounter;
                        date = moment(nextMonth).set("date", day);
                        nextMonthDaysCounter++;
                    }

                    let hours = this._getHoursWorked(date, ajaxData);
                    let content = "";
                    if (hours) {
                        content = `<span class="calendar-circle calendar-hours">${hours}</span>`
                    } else if (this._isVacation(date, ajaxData)) {
                        content = `<span class="calendar-circle calendar-vacation">&nbsp;</span>`
                    }

                    cell.innerHTML = `
                        <div class="calendar-cell-container ${otherMonth ? 'calendar-other-month' : ''}">
                            <span class="calendar-day-span">${day}</span>
                            <span class="calendar-content-span">${content}</span>
                        </div>
                    `;
                    cell.dataset.date = date.format("YYYY-MM-DD");

                }
            }
        }

        _getCellClass(row, col) {
            return `cc${row}${col}`;
        }

        printConstants() {
            console.log(`monthShown = ${this.monthShown}, dateSelected = ${this.dateSelected}`);
        }

        previousMonth() {
            this.monthShown = this.monthShown.subtract(1, "months");
            this.printConstants();
        }

        nextMonth() {
            this.monthShown = this.monthShown.add(1, "months");
            this.printConstants();
        }

        _getHoursWorked(date, ajaxData) {
            if (typeof ajaxData === "undefined") return 0;

            let workdays = ajaxData["workdays"];
            let isodate = date.format("YYYY-MM-DD");
            if (workdays.hasOwnProperty(isodate)) {
                return workdays[isodate];
            } else {
                return 0;
            }
        }

        _isVacation(date, ajaxData) {
            if (typeof ajaxData === "undefined") return false;

            let vacations = ajaxData["vacations"];
            return vacations.includes(date.format("YYYY-MM-DD"));
        }

        _cellClickHandler(cell) {
            let isodate = cell.dataset.date;
            console.log(isodate);
            window.location.href = `/attendance/u/{{_id}}/date/${isodate}`;
        }
    }

    let date = moment("{{date}}", "YYYY-MM-DD");
    let calendarTable = document.getElementById("calendar-table");
    let calendar = new Calendar(calendarTable, date, moment(date).startOf("month"));

    $(document).ready(() => {
        initWorkSpans();
    });

    function initWorkSpans() {
        $(".workspan-from, .workspan-to").on("change", (event) => {
            let et = $(event.target);

            let row = et.closest("tr");
            let from_input = row.find(".workspan-from");
            let to_input = row.find(".workspan-to");
            let hours_input = row.find(".workspan-hours");

            if (to_input.val() && from_input.val()) {
                let hours = strTimeDifference(from_input.val(), to_input.val());
                if (hours >= 0) {
                    hours_input.val(hours);
                } else {
                    to_input.val(from_input.val());
                    hours_input.val(0);
                }
            }
        });

        $(".workspan-hours").on("change", (event) => {
            let et = $(event.target);

            let row = et.closest("tr");
            let from_input = row.find(".workspan-from");
            let to_input = row.find(".workspan-to");
            let hours_input = row.find(".workspan-hours");

            if (from_input.val()) {
                let newTime = addToStrTime(from_input.val(), parseFloat(hours_input.val()));
                let newTimeHours = newTime.split(":")[0];
                if (parseInt(newTimeHours) > 23) {
                    newTime = "23:30"
                }
                to_input.val(newTime);
            } else if (to_input.val()) {
                let newTime = addToStrTime(to_input.val(), -parseFloat(hours_input.val()));
                let newTimeHours = newTime.split(":")[0];
                if (parseInt(newTimeHours) < 0) {
                    newTime = "00:00"
                }
                from_input.val(newTime)
            }
            from_input.change();
        })
    }

    function strTimeDifference(start, end) {
        start = start.split(":");
        end = end.split(":");
        let hours = parseInt(end[0]) - parseInt(start[0]);
        let minutes = parseInt(end[1]) - parseInt(start[1]);
        return hours + minutes / 60;
    }

    function addToStrTime(time, delta) {
        time = time.split(":");
        let floatTime = parseInt(time[0]) + parseInt(time[1]) / 60;
        let newTime = floatTime + delta;

        let sign = newTime >= 0 ? "" : "-";

        newTime = Math.abs(newTime);
        let newHours = Math.trunc(newTime);
        let newMinutes = Math.round((newTime - newHours) * 60);
        return sign + newHours.toString().padStart(2, "0") + ":" + newMinutes.toString().padStart(2, "0");
    }

    function saveWorkSpan(button) {
        let row = $(button).closest("tr");
        console.log(row.find(".workspan-assignment").val());

        let data = {
            "from": row.find(".workspan-from").val(),
            "hours": row.find(".workspan-hours").val(),
            "assignment": row.find(".workspan-assignment").val(),
            "date": calendar.dateSelected.format("YYYY-MM-DD"),
        };

        $.ajax({
            url: "/attendance/api/u/{{_id}}/workspans",
            type: "post",
            data: JSON.stringify(data),
            success: function (response) {
                alert("Podařilo se!");
                location.reload();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
                alert("Serveru se něco nelíbí.")
            }
        });
    }

    function saveVacation() {
        let data = {
            "from": $("#vacation-from").val(),
            "to": $("#vacation-to").val()
        };

        $.ajax({
            url: "/attendance/api/u/{{_id}}/vacations",
            type: "post",
            data: JSON.stringify(data),
            success: function (response) {
                alert("Podařilo se!");
                location.reload();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
                alert("Serveru se něco nelíbí.")
            }
        });
    }

    function deleteVacation(button) {
        let vacationId = $(button).data("id");

        $.ajax({
            url: "/attendance/api/u/{{_id}}/vacations/delete",
            type: "post",
            data: vacationId,
            success: function (response) {
                alert("Podařilo se!");
                location.reload();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
                alert("Serveru se něco nelíbí.")
            }
        });
    }

    function deleteWorkspan(button) {
        let workspanId = $(button).data("id");

        $.ajax({
            url: "/attendance/api/u/{{_id}}/workspans/delete",
            type: "post",
            data: workspanId,
            success: function (response) {
                alert("Podařilo se!");
                location.reload();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
                alert("Serveru se něco nelíbí.")
            }
        });
    }

</script>

{% end %}{# block body#}