{% extends "base.hbs" %}
{% block title %} UST intranet | Adresář{%end%}
{% block body %}

<style>
    body {
        overflow: hidden;
        height: 100%;
    }

    #body {
        width: 100%;
        height: 100%;
        overflow: auto;
    }

    #users-table-control-panel {
        width: 100%;
        padding: 5px;
    }

    #users-table-wrapper {
        margin-left: -15px;
        margin-right: -15px;
    }

    #right-side-buttons {
        float: right;
    }

    #messages-span {
        padding-left: 10px;
        padding-right: 10px;
        vertical-align: middle;
        overflow: hidden;
        white-space: nowrap;
    }

    .tabulator {
        user-select: none;
    }

    #new-user-form-wrapper {
        width: 50%;
        margin-left: auto;
        margin-right: auto;
    }

    .new-user-row .tabulator-cell {
        background-color: rgba(0, 0, 0, 0.05)
    }

    .edited-cell {
        background-color: rgba(0, 0, 0, 0.05)
    }
</style>

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <h1>Tabulka uživatelů</h1>
            <div id="users-table-wrapper">
                <div id="users-table-control-panel">
                    <div id="right-side-buttons">
                        <div class="btn-group" role="group">
                            <button id="add-user-btn" type="button" class="btn btn-light" onclick="addUser()">
                                Přidat
                            </button>
                            <button id="delete-user-btn" type="button" class="btn btn-light" onclick="deleteUser()">
                                Smazat
                            </button>
                        </div>
                        <button id="save-btn" type="button" class="btn btn-light" onclick="saveUsersEdits()">
                            Uložit
                        </button>
                    </div>
                    <div id="left-side-widgets">
                        <div class="btn-group" role="group">
                        <button id="undo-btn" type="button" class="btn btn-light" onclick="undoTableAction()">
                            Vzít zpět
                        </button>
                        <button id="redo-btn" type="button" class="btn btn-light" onclick="redoTableAction()">
                            Znovu
                        </button>
                        </div>
                        <button id="deselect-all" type="button" class="btn btn-light" onclick="deselectAllRows()">
                            Odznačit vše
                        </button>
                        <span id="messages-span"></span>
                    </div>
                </div>
                <div id="users-table"></div>
            </div>
        </div>
    </div>

    <div class="row">
        <br><br><br>
    </div>
</div>

<script type="text/javascript">

    let originalData = {};
    let editedData = {};
    let newData = new Set(); // sem přijdou jen id nových uživatelů
    let deletedData = new Set();

    /**
     * Zobrazí oznámení v messages-span.
     */
    function setMessage(msg) {
        $("#messages-span").text(msg);
    }

    /**
     * Smaže poslední oznámení z messages-span.
     */
    function clearMessage() {
        $("#messages-span").text("");
    }

    /**
     * Připraví tabulátor a callbacky.
     * Očekávané chování: některé sloupce jsou editovatelné na double click. Je-li nová hodnota jiná
     * než hodnota v databázi, editovaná buňka se podbarví šedě.
     *
     * Možný zdroj chyb: buňky momentálně nejsou obarvované pomocí formateru ale přímo v cellDataEdited.
     * Dojde-li ke změně dat v buňce bez volání cellDataEdited, podbarvení se nezmění.
     * V tuto chvíli nevím o takové možnosti kromě undo/redo, které jsou ošetřené.
     * TODO Zkusit to udělat lépe
     */
    function drawTable() {

        let regexEmail = "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$";
        let regexPhone = "^\\+?\\d+[0-9- ]*\\d+$";

        /**
         * Ztmaví pozadí buňky.
         */
        let markElementEdited = function (elem) {
            elem.classList.add("edited-cell");
        };

        /**
         * Zruší ztmavení pozadí buňky.
         */
        let unmarkElementEdited = function (elem) {
            elem.classList.remove("edited-cell");
        };

        /**
         * Callback tabulatoru. Editace buněk tabulatoru na doubleclick.
         * Zdroj: https://github.com/olifolkerd/tabulator/issues/631
         */
        let dblClickEditFunc = function (e, cell) {
            if (cell.getField() === "email") {
                setMessage("Pozor, změnou emailové adresy můžete uživateli znemožnit přihlášení");
            } else {
                clearMessage();
            }
            console.log("here");
            deselectAllRows();
            console.log("id dblClickEditFunc");
            cell.edit(true);
        };

        /**
         * Callback tabulatoru. Invertuje bool hodnotu buňky.
         */
        let boolCellChangeValue = function (e, cell) {
            clearMessage();
            cell.setValue(!cell.getValue());
            e.preventDefault()
        };

        /**
         * Callback tabutatoru. Zobrazí varování po doubleclicku na needitovatelnou buňku.
         */
        let uneditableMsg = function (e, cell) {
            clearMessage();
            setMessage("Tato buňka není editovatelná")
        };

        /**
         * Callback tabulatoru. Volá se po změně dat v buňce.
         *
         * Při první úpravě řádku se starý obsah řádku uloží to originalData.
         * Změněný field se uloží do editedData. Pokud je nová hodnota stejná jako originální hodnota (v db),
         * field je z editedData odstraněn. Pokud je odstraněn poslední field, odstraní se id.
         *
         * Liší-li se originální a nová data, buňka je podbarvena šedě.
         */
        let cellDataEdited = function (cell) {
            let id = cell.getRow().getData().id;
            let field = cell.getField();

            let oldV = cell.getOldValue();
            let newV = cell.getValue();

            if (oldV === newV) return;

            if (typeof oldV == "undefined" && newV === "") return;

            // zkopíruj řádek do originalData, vrať změnu
            // z originalData už nebude odstraněn
            if (!(id in originalData) && !(newData.has(id))) {
                console.log("dávám řádek do originalData");
                originalData[id] = Object.assign({}, cell.getRow().getData());
                originalData[id][field] = oldV;
            }

            // dej id do editedData
            if (!(id in editedData)) {
                console.log("dávám id do editedData");
                editedData[id] = {};
            }

            // změnil-li se field zpět na původní hodnotu, smaž field z editedData,
            // jinak ulož změnu
            if (!newData.has(id) && originalData[id][field] === newV) {
                console.log("data jsou stejná jako originál");
                console.log(originalData[id][field]);
                console.log(newV);
                delete editedData[id][field];
                unmarkElementEdited(cell.getElement())
            } else {
                console.log("ukládám změnu");
                editedData[id][field] = newV;
                markElementEdited(cell.getElement());
            }

            // pokud byl poslední field řádku upraven zpět na původní hodnotu, smaž id z editedData
            if ($.isEmptyObject(editedData[id])) {
                console.log("Mažu id z editedData");
                delete editedData[id];
            }

            console.log("originalData");
            console.log(originalData);
            console.log("editedData");
            console.log(editedData);
        };

        /**
         * Callback tabulátoru. Pokud byla vrácena úprava buňky, zavolá cellDataEdited.
         * Pokud bylo vráceno smazání řádku, podbarvi všechny upravené fieldy (bohužel, tabulátor si
         * nepamatuje podbarvení smazaných řádků).
         */
        let undoHappened = function (action, component, data) {
            if (component.constructor.name === "CellComponent") {
                cellDataEdited(component);
            }
            if (action === "rowDelete") {
                let id = component.getData().id;

                if (id in editedData) {
                    for (let field in editedData[id]) {
                        if (editedData[id].hasOwnProperty(field)) {
                            markElementEdited(component.getCell(field).getElement());
                        }
                    }
                }
            }
        };

        /**
         * Callback tabulátoru. Pokud byla znovu provedena úprava buňky, zavolá cellDataEdited.
         */
        let redoHappened = function (action, component, data) {
            if (component.constructor.name === "CellComponent") {
                cellDataEdited(component);
            }
        };

        /**
         * Callback tabulatoru. Pokud je to obnovený dříve smazaný řádek, odstraní id z deletedData.
         * Nové řádky jsou podbarveny šedě.
         */
        let rowAdded = function (row) {
            let id = row.getData().id;

            // pokud byl tento řádek dříve odstraněn, už odstraněn není
            if (deletedData.has(id)) {
                deletedData.delete(id);
            }

            // je-li to nově vytvořený řádek, podbarvi ho
            if (newData.has(id)) {
                row.getElement().classList.add("new-user-row")
            }
        };

        /**
         * Callback tabulatoru. Přidá id řádku do deletedData.
         */
        let rowDeleted = function (row) {
            let id = row.getData().id;

            deletedData.add(id);
        };

        return new Tabulator("#users-table", {
            width: '100%',
            height: '500px',
            movableColumns: true,
            history: true,
            selectable: true,
            selectablePersistence: false,
            tooltipsHeader: true,
            cellEdited: cellDataEdited,
            historyUndo: undoHappened,
            historyRedo: redoHappened,
            rowAdded: rowAdded,
            rowDeleted: rowDeleted,
            columns: [
                {
                    title: "Přijmení",
                    field: "surname",
                    frozen: true,
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                    validator: "string",
                },
                {
                    title: "Jméno",
                    field: "first_name",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                    validator: "string",
                },
                {
                    title: "ID",
                    field: "id",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Email",
                    field: "email",
                    sorter: "string",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                    validator: ["required", `regex:${regexEmail}`],
                },
                {
                    title: "Email ověřen",
                    field: "email_validate",
                    formatter: "tickCross",
                    align: "center",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Telefon",
                    field: "phone_number",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                    validator: `regex:${regexPhone}`
                },
                {
                    title: "Datum narození",
                    field: "birthdate",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                },
                {
                    title: "Bydliště",
                    field: "home_address",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                },
                {
                    title: "Kontaktní adresa",
                    field: "contact_address",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                },
                {
                    title: "Titul p. j.",
                    field: "pre_name_title",
                    sorter: "string",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                    headerTooltip: "Titul před jménem",
                },
                {
                    title: "Titul z. j.",
                    field: "post_name_title",
                    sorter: "string",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                    headerTooltip: "Titul za jménem",
                },
                {
                    title: "Číslo účtu",
                    field: "account_number",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                },
                {
                    title: "Role",
                    field: "role",
                    sorter: "string",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                },
                {
                    title: "Pracovní náplň",
                    field: "assignment",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                },
                {
                    title: "Dovednosti",
                    field: "skills",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                },
                {
                    title: "Datum založení účtu",
                    field: "created",
                    cellDblClick: uneditableMsg,
                    // formatter: "datetime",
                },
                {
                    title: "Typ smlouvy",
                    field: "contract_type",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Konec platnosti smlouvy",
                    field: "contract_expiration_date",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Je smlouva platná?",
                    field: "is_valid",
                    formatter: "tickCross",
                    align: "center",
                    cellDblClick: boolCellChangeValue,
                },
                {
                    title: "Potvrzení o studiu",
                    field: "certificate_of_study",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Prohlášení k dani",
                    field: "tax_evasion",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Hodinová mzda",
                    field: "hour_rate",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Odpracováno hodin za tento měsíc",
                    field: "hours_worked_this_month",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Aktuální hrubá mzda",
                    field: "actual_gross_wage",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Odpracováno hodin za minulý měsíc",
                    field: "hours_worked_last_month",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Hrubá mzda za minulý měsíc",
                    field: "last_months_gross_wage",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Nejbližší dovolená",
                    field: "next_vacation",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Měsíc uzavřen",
                    field: "month_closed",
                    formatter: "tickCross",
                    align: "center",
                    cellDblClick: uneditableMsg,
                },
                {
                    title: "Poznámky",
                    field: "notes",
                    editor: "input",
                    editable: false,
                    cellDblClick: dblClickEditFunc,
                },
            ],
            ajaxURL: "users/api/user/admintable",
            ajaxConfig: {
                method: "GET",
                headers: {
                    "Content-type": 'application/json; charset=utf-8', //set specific content type
                },
            }
        });
    }

    table = drawTable();

    /**
     * Zruší všechen výběr.
     */
    function deselectAllRows() {
        rows = table.getSelectedRows();

        for (let row of rows) {
            row.deselect();
        }
    }

    /**
     * onclick handler tlačítka vzít zpět.
     * není-li co vzít zpět, zobrazí oznámení.
     */
    function undoTableAction() {
        let undone = table.undo();
        if (undone) {
            clearMessage();
        } else {
            setMessage("Není co vzít zpět");
        }
    }

    /**
     * onclick handler tlačítka znovu.
     * není-li co provést znovu, zobrazí oznámení.
     */
    function redoTableAction() {
        let redone = table.redo();
        if (redone) {
            clearMessage();
        } else {
            setMessage("Není co provést znovu")
        }
    }

    /**
     * onclick handler tlačítka uložit (změny dat v tabulce uživatelů)
     * Ajaxem odesílá stringified data na server
     */
    function saveUsersEdits() {
        let data = {
            "new": {},
            "edited": {},
            "deleted": [],
        };

        // ulož id nových řádků, které nebyly následně smazány
        for (let id of newData) {
            if (!(deletedData.has(id))) {
                data["new"][id] = editedData[id];
            }
        }

        // ulož id řádků, byly smazány a nebyly vytvořeny v tomto sezení
        for (let id of deletedData) {
            if (!(newData.has(id))) {
                data["deleted"].push(id);
            }
        }

        // ulož změny v řádcích
        for (let id in editedData) {
            if (editedData.hasOwnProperty(id)) {
                if (!deletedData.has(id) && !newData.has(id)) {
                    data["edited"][id] = editedData[id];
                }
            }
        }

        data = JSON.stringify(data);

        $.ajax({
            url: "/users/api/user/admintable",
            type: "post",
            data: data,
            success: function (response) {
                console.log(response);
                setMessage("Změny uloženy")
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus, errorThrown);
                setMessage("Nepodařilo se uložit změny")
            }
        });
    }

    /**
     * onclick handler tlačítka přidat. Přidá řádek do tabulky a jeho id do newData.
     */
    function addUser() {
        let id = genMongoObjectID();

        newData.add(id);
        table.addData([{id: id}], true);
    }

    /**
     * onclick handler tlačítka smazat. Odebere vybrané řádky z tabulky a jejich id přidá do deletedData.
     */
    function deleteUser() {
        let selected = table.getSelectedRows();

        for (let row of selected) {
            deletedData.add(row.getData().id);
            row.delete();
        }
    }

    /**
     * Vytvoří nové MongoDB ObjectID pro nového uživatele.
     */
    function genMongoObjectID() {
        let timestamp = (new Date().getTime() / 1000 | 0).toString(16);
        return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {
            return (Math.random() * 16 | 0).toString(16);
        }).toLowerCase();
    }
</script>

{% end %}{# block body#}
