{% extends "base.hbs" %}
{% block title %} | Docházková karta {%end%}
{% block body %}

<script src="https://unpkg.com/moment@2.24.0/moment.js"></script>
<script src="https://unpkg.com/moment@2.24.0/locale/cs.js"></script>

<style>
    input[type=date], input[type=time] {
        border-style: solid;
        border-width: thin;
        border-color: #aaaaaa;
    }

    #vacations table td:nth-child(3) {
        text-align: center;
    }

    #workspans table td:nth-child(5) {
        text-align: center;
    }

    .calendar-month-title {
        text-transform: capitalize;
    }

    .table td.calendar-cell {
        padding: 0;
        height: 49px;
    }

    .calendar-cell-container {
        display: table;
        height: 100%;
        width: 100%;
        position: relative;
        vertical-align: middle;
        cursor: pointer;
    }

    .calendar-other-month {
        opacity: 40%;
    }

    .calendar-day-span {
        font-size: 12px;
        position: absolute;
        top: 0;
        right: 0;
        padding-right: 3px;
        font-weight: bold;
    }

    .calendar-content-span {
        display: table-cell;
        vertical-align: middle;
        text-align: center;
        font-weight: bold;
    }

    .calendar-selected-day {
        background: #ddd;
    }

    .calendar-circle {
        border-radius: 16px;
        width: 32px;
        height: 32px;
        display: inline-block;
        color: white;
        padding-top: 3px;
    }

    .calendar-circle.calendar-hours {
        background: rgb(33, 37, 41);
    }

    .calendar-circle.calendar-vacation {
        background: green;
    }

    .close-month-alert {
        background: none;
        border-color: var(--dark);
    }
</style>


<div class="container">
    <h1>Docházková karta: <a href="/users/u/{{_id}}">{{name}}</a></h1>

    {% if not last_month_closed %}
    <div class="row">
        <div class="col col-12">
            <div class="alert alert-secondary close-month-alert" role="alert">
                Ještě nemáte uzavřený minulý měsíc.
                <a href="/attendance/u/{{_id}}/date/{{last_month_date}}" class="alert-link">
                    Zkontrolujte si prosím docházku a uzavřete ji
                </a>.
            </div>
        </div>
    </div>
    {% end %}

    <div class="row">
        <div class="col col-12 col-lg-6">
            <div id="calendar">
                <table class="table text-center table-bordered" style="table-layout: fixed" id="calendar-table">
                </table>
            </div>

            <div id="vacations">
                <table class="table">
                    <thead class="thead-dark">
                    <tr>
                        <th colspan="4">Dovolená</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <th>Od</th>
                        <th>Do</th>
                        <th></th>
                    </tr>
                    {% for vacation in vacations %}
                    <tr>
                        <td>{{vacation["from"]}}</td>
                        <td>{{vacation["to"]}}</td>
                        <td>
                            <button class="btn btn-sm btn-secondary row-delete-btn" data-id="{{vacation['_id']}}"
                                    onclick="interruptVacation(this)" style="padding-bottom: 0">
                                <i class="material-icons" style="font-size: 17px">close</i>
                            </button>
                        </td>
                    </tr>
                    {% end %}
                    <tr>
                        <td><input type="date" style="width: 150px" id="vacation-from"></td>
                        <td><input type="date" style="width: 150px" id="vacation-to"></td>
                        <td>
                            <button class="btn btn-secondary" onclick="saveVacation()">Přidat</button>
                        </td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <div class="col col-12 col-lg-6">
            <div id="month-info">
                <table class="table">
                    <thead class="thead-dark">
                    <tr>
                        <th>Informace o měsíci</th>
                        <th class="text-right">
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>Počet odpracovaných hodin</td>
                        <td id="month-info-hours-worked-td"></td>
                    </tr>
                    <tr>
                        <td>Maximální počet hodin v měsíci</td>
                        <td id="month-info-max-hours-td"></td>
                    </tr>
                    <tr>
                        <td>Chybí vyčerpat</td>
                        <td id="month-info-available-hours-td"></td>
                    </tr>
                    <tr>
                        <td>Za měsíc hrubého</td>
                        <td id="month-info-gross-wage-td"></td>
                    </tr>
                    <tr>
                        <td>Za měsíc daň</td>
                        <td id="month-info-tax-amount-td">-</td>
                    </tr>
                    <tr>
                        <td>Za měsíc čistého</td>
                        <td id="month-info-net-wage-td">-</td>
                    </tr>
                    <tr>
                        <td>Hodinová mzda</td>
                        <td id="month-info-hour-rate-td"></td>
                    </tr>
                    <tr>
                        <td>Vyčerpáno hodin v roce</td>
                        <td id="month-info-year-hours-worked-td"></td>
                    </tr>
                    <tr>
                        <td>Volné hodiny do konce roku</td>
                        <td id="month-info-year-available-hours-td"></td>
                    </tr>
                    <tr>
                        <td>Dny dovolené v tomto roce</td>
                        <td id="month-info-year-days-of-vacation-td"></td>
                    </tr>
                    <tr>
                        <td colspan="2" class="text-center">
                            <button class="btn btn-primary" id="close-month-button" onclick="closeMonth()">
                                Uzavřít měsíc
                            </button>
                        </td>
                    </tr>

                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- TODO Pozor hack! Pokud je uzavřený měsíc, celá tabulka je schovaná ve funkci updatu měsíční tabulky
     (kde se schovává tlačítko uzavřít měsíc), je potřeba to dělat lépe -->
    <div class="row">
        <div class="col">
            <div id="workspans">
                <table class="table">
                    <thead class="thead-dark">
                    <tr>
                        <th colspan="5">
                            <button type="button" class="btn btn-light" style="float: right"
                                    onclick="showMonthModal()">
                                Zobrazit měsíc
                            </button>
                            {{date_pretty if date_pretty else "nic"}}
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <th>Od</th>
                        <th>Do</th>
                        <th>Počet hodin</th>
                        <th>Projekt</th>
                        <th></th>
                    </tr>
                    {% for workspan in workspans %}
                    <tr>
                        <td>
                            {{workspan["from"]}}
                        </td>
                        <td>{{workspan["to"]}}</td>
                        <td>{{workspan["hours"]}}</td>
                        <td>{{workspan["assignment"]}}</td>
                        <td>
                            <button class="btn btn-sm btn-secondary row-delete-btn" data-id="{{workspan['_id']}}"
                                    onclick="deleteWorkspan(this)">
                                &times;
                            </button>
                        </td>
                    </tr>
                    {% end %}
                    {% if is_vacation_day %}
                    <tr>
                        <td colspan="5" style="text-align: center;">Na dovolené se nepracuje.</td>
                    </tr>
                    {% else %}
                    <tr>
                        <td><input class="workspan-from" type="time" step="1800" value="09:00"></td>
                        <td><input class="workspan-to" type="time" step="1800"></td>
                        <td><input class="workspan-hours" type="number" style="width: 50px"
                                   min="0" max="12" step="0.5"></td>
                        <td>
                            <select class="workspan-assignment" style="border-width: thin; width: 200px">
                                <option value="hmm">Pracovat</option>
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-secondary" onclick="saveWorkSpan(this)">Přidat</button>
                        </td>
                    </tr>
                    {% end %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


<script>

    class Calendar {

        constructor(tableElement, dateSelected, monthShown) {
            this.dateSelectedChangeEvent = new CustomEvent("dateSelectedChange");
            this.monthShownChangeEvent = new CustomEvent("monthShownChange");

            this.CALENDAR_ROWS = 6;
            this.CALENDAR_COLS = 7;

            this._dateSelected = dateSelected;
            this._monthShown = monthShown;
            this.table = tableElement;

            this.workdays = null;
            this.vacations = null;

            this._buildCalendar();
            this._connectButtonsEvents();

            this.table.addEventListener("monthShownChange", () => {
                console.log("event monthShownChange");
                this.workdays = null;
                this.vacations = null;
                this._updateMonthTitle();
                this.populateCalendar();
            });

            this.table.dispatchEvent(this.dateSelectedChangeEvent);
            this.table.dispatchEvent(this.monthShownChangeEvent);
        }

        get dateSelected() {
            return moment(this._dateSelected);
        }

        set dateSelected(value) {
            this._dateSelected = moment(value);
            this.table.dispatchEvent(this.dateSelectedChangeEvent);
        }

        get monthShown() {
            return moment(this._monthShown);
        }

        set monthShown(value) {
            this._monthShown = moment(value);
            this.table.dispatchEvent(this.monthShownChangeEvent);
        }

        _updateMonthTitle() {
            let monthTitleElem = this.table.getElementsByClassName("calendar-month-title")[0];
            monthTitleElem.innerHTML = this.monthShown.format("MMMM YYYY");
        }

        _buildCalendar() {
            this.table.innerHTML = `
                <thead class="thead-dark">
                    <tr>
                        <th colspan="7" class="text-left">
                            <h4 style="display: inline; float: left;" class="calendar-month-title"></h4>
                            <span style="float: right">
                                <button type="button" class="btn btn-light calendar-previous-month-btn">
                                    Předchozí měsíc
                                </button>
                                <button type="button" class="btn btn-light calendar-next-month-btn">
                                    Následující měsíc
                                </button>
                            </span>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>Po</th>
                        <th>Út</th>
                        <th>St</th>
                        <th>Čt</th>
                        <th>Pá</th>
                        <th>So</th>
                        <th>Ne</th>
                    </tr>
                </tbody>`

            let tableBody = this.table.getElementsByTagName("tbody")[0];

            for (let row = 0; row < this.CALENDAR_ROWS; row++) {
                let tr = document.createElement("tr");

                for (let col = 0; col < this.CALENDAR_COLS; col++) {
                    let td = document.createElement("td");

                    let cellClass = this._getCellClass(row, col);
                    td.classList.add(cellClass);
                    td.classList.add("calendar-cell");
                    td.dataset.date = "";
                    td.addEventListener("click", () => {
                        this._cellClickHandler(td);
                    });

                    tr.appendChild(td);
                }
                tableBody.appendChild(tr);
            }
        }

        _connectButtonsEvents() {
            let previousButton = this.table.getElementsByClassName("calendar-previous-month-btn")[0];
            let nextButton = this.table.getElementsByClassName("calendar-next-month-btn")[0];

            previousButton.addEventListener("click", () => {
                this.previousMonth()
            });
            nextButton.addEventListener("click", () => {
                this.nextMonth()
            });
        }

        _ajaxMonthData() {
            // TODO je potřeba v kalendáři mít přístup i k assignmentům
            $.ajax({
                context: this,
                url: "/attendance/api/u/{{_id}}/calendar/date/" + this.monthShown.format("YYYY-MM-DD"),
                type: "post",
                success: function (response) {
                    let parsedResponse = JSON.parse(response);
                    this.workdays = parsedResponse["workdays"];
                    this.vacations = parsedResponse["vacations"];
                    this.populateCalendar(parsedResponse);
                },
                error: ajaxError
            });
        }

        populateCalendar(ajaxData) {
            console.log("ajaxData", ajaxData);
            if (typeof ajaxData === "undefined") this._ajaxMonthData();

            console.log("monthShown", this.monthShown.toString());
            let lastMonth = this.monthShown.subtract(1, "months");
            console.log("lastMonth", lastMonth.toLocaleString());
            let nextMonth = this.monthShown.add(1, "months");
            console.log("nextMonth", nextMonth.toLocaleString());

            let firstDay = this.monthShown.day();
            console.log("firstDay", firstDay);
            let daysInMonth = this.monthShown.daysInMonth();
            console.log("daysInMonth", daysInMonth);
            let daysInLastMonth = lastMonth.daysInMonth();
            console.log("daysInLastMonth", daysInLastMonth);

            // firstDay == 0 znamená neděli, ((firstDay - 1 + 7) % 7) je fix na to
            let lastMonthDaysCounter = daysInLastMonth - ((firstDay - 1 + 7) % 7) + 1;
            console.log("lastMonthDaysCounter", lastMonthDaysCounter);
            let thisMonthDaysCounter = 1;
            let nextMonthDaysCounter = 1;

            for (let row = 0; row < this.CALENDAR_ROWS; row++) {
                for (let col = 0; col < this.CALENDAR_COLS; col++) {
                    let cellClass = this._getCellClass(row, col);
                    let cell = this.table.getElementsByClassName(cellClass)[0];

                    let dayNum = "";
                    let date = "";
                    let otherMonth = true;
                    if (lastMonthDaysCounter <= daysInLastMonth) {
                        dayNum = lastMonthDaysCounter;
                        date = moment(lastMonth).set("date", dayNum);
                        lastMonthDaysCounter++;
                    } else if (thisMonthDaysCounter <= daysInMonth) {
                        dayNum = thisMonthDaysCounter;
                        date = this.monthShown.set("date", dayNum);
                        thisMonthDaysCounter++;
                        otherMonth = false;
                    } else {
                        dayNum = nextMonthDaysCounter;
                        date = moment(nextMonth).set("date", dayNum);
                        nextMonthDaysCounter++;
                    }

                    let hours = this._getHoursWorked(date, ajaxData);
                    let content = "";
                    if (hours) {
                        content = `<span class="calendar-circle calendar-hours">${hours}</span>`
                    } else if (this._isVacation(date, ajaxData)) {
                        content = `<span class="calendar-circle calendar-vacation">&nbsp;</span>`
                    }
                    let isSelected = false;
                    if (this.dateSelected.isSame(date, "day")) {
                        isSelected = true;
                    }

                    cell.innerHTML = `
                        <div class="calendar-cell-container ${otherMonth ? 'calendar-other-month' : ''} ${isSelected ? 'calendar-selected-day' : ''}">
                            <span class="calendar-day-span">${dayNum}</span>
                            <span class="calendar-content-span">${content}</span>
                        </div>
                    `;
                    cell.dataset.date = date.format("YYYY-MM-DD");

                }
            }
        }

        _getCellClass(row, col) {
            return `cc${row}${col}`;
        }

        printConstants() {
            console.log(`monthShown = ${this.monthShown}, dateSelected = ${this.dateSelected}`);
        }

        previousMonth() {
            this.monthShown = this.monthShown.subtract(1, "months");
            this.printConstants();
        }

        nextMonth() {
            this.monthShown = this.monthShown.add(1, "months");
            this.printConstants();
        }

        _getHoursWorked(date, ajaxData) {
            if (typeof ajaxData === "undefined") return 0;

            let workdays = ajaxData["workdays"];
            let isodate = date.format("YYYY-MM-DD");
            if (workdays.hasOwnProperty(isodate)) {
                return workdays[isodate];
            } else {
                return 0;
            }
        }

        _isVacation(date, ajaxData) {
            if (typeof ajaxData === "undefined") return false;

            let vacations = ajaxData["vacations"];
            return vacations.includes(date.format("YYYY-MM-DD"));
        }

        _cellClickHandler(cell) {
            let isodate = cell.dataset.date;
            console.log(isodate);
            window.location.href = `/attendance/u/{{_id}}/date/${isodate}`;
        }
    }

    let date = moment("{{date}}", "YYYY-MM-DD");
    let calendarTable = document.getElementById("calendar-table");
    let calendar = new Calendar(calendarTable, date, moment(date).startOf("month"));

    $(document).ready(() => {
        initWorkSpans();
        updateMonthInfoTable();
        calendarTable.addEventListener("monthShownChange", () => {
            updateMonthInfoTable();
        });
    });

    function initWorkSpans() {
        $(".workspan-from, .workspan-to").on("change", (event) => {
            let et = $(event.target);

            let row = et.closest("tr");
            let from_input = row.find(".workspan-from");
            let to_input = row.find(".workspan-to");
            let hours_input = row.find(".workspan-hours");

            if (to_input.val() && from_input.val()) {
                let hours = strTimeDifference(from_input.val(), to_input.val());
                if (hours >= 0) {
                    hours_input.val(hours);
                } else {
                    to_input.val(from_input.val());
                    hours_input.val(0);
                }
            }
        });

        $(".workspan-hours").on("change", (event) => {
            let et = $(event.target);

            let row = et.closest("tr");
            let from_input = row.find(".workspan-from");
            let to_input = row.find(".workspan-to");
            let hours_input = row.find(".workspan-hours");

            if (from_input.val()) {
                let newTime = addToStrTime(from_input.val(), parseFloat(hours_input.val()));
                let newTimeHours = newTime.split(":")[0];
                if (parseInt(newTimeHours) > 23) {
                    newTime = "23:30"
                }
                to_input.val(newTime);
            } else if (to_input.val()) {
                let newTime = addToStrTime(to_input.val(), -parseFloat(hours_input.val()));
                let newTimeHours = newTime.split(":")[0];
                if (parseInt(newTimeHours) < 0) {
                    newTime = "00:00"
                }
                from_input.val(newTime)
            }
            from_input.change();
        })
    }

    function updateMonthInfoTable(data) {
        if (typeof data == "undefined") {
            console.log("ajaxing month table");
            $.ajax({
                url: "/attendance/api/u/{{_id}}/monthinfo/date/" + calendar.monthShown.format("YYYY-MM-DD"),
                type: "post",
                success: function (response) {
                    updateMonthInfoTable(JSON.parse(response));
                },
                error: ajaxError,
            });
        } else {
            console.log("updating month table");
            console.log(data);

            document.getElementById("month-info-hours-worked-td").textContent = data["month_hours_worked"];
            document.getElementById("month-info-max-hours-td").textContent =
                    data["month_max_hours"] ? data["month_max_hours"] : "-";
            document.getElementById("month-info-available-hours-td").textContent =
                    data["month_available_hours"] ? data["month_available_hours"] : "-";
            document.getElementById("month-info-gross-wage-td").textContent =
                    data["month_gross_wage"] ? data["month_gross_wage"] : "-";
            document.getElementById("month-info-tax-amount-td").textContent =
                    data["month_tax_amount"] ? data["month_tax_amount"] : "-";
            document.getElementById("month-info-net-wage-td").textContent =
                    data["month_net_wage"] ? data["month_net_wage"] : "-";
            document.getElementById("month-info-hour-rate-td").textContent =
                    data["hour_rate"] ? data["hour_rate"] : "-";
            document.getElementById("month-info-year-hours-worked-td").textContent = data["year_hours_worked"];
            document.getElementById("month-info-year-available-hours-td").textContent =
                    data["year_available_hours"] ? data["year_available_hours"] : "-";
            document.getElementById("month-info-year-days-of-vacation-td").textContent = data["year_days_of_vacation"];

            const closeMonthButton = $("#close-month-button");
            const addWorkspansTable = $("#workspans");
            if (data["month_closed"]) {
                closeMonthButton.hide();
                addWorkspansTable.hide();
            } else {
                closeMonthButton.show();
                addWorkspansTable.show();
            }
        }
    }

    function strTimeDifference(start, end) {
        start = start.split(":");
        end = end.split(":");
        let hours = parseInt(end[0]) - parseInt(start[0]);
        let minutes = parseInt(end[1]) - parseInt(start[1]);
        return hours + minutes / 60;
    }

    function addToStrTime(time, delta) {
        time = time.split(":");
        let floatTime = parseInt(time[0]) + parseInt(time[1]) / 60;
        let newTime = floatTime + delta;

        let sign = newTime >= 0 ? "" : "-";

        newTime = Math.abs(newTime);
        let newHours = Math.trunc(newTime);
        let newMinutes = Math.round((newTime - newHours) * 60);
        return sign + newHours.toString().padStart(2, "0") + ":" + newMinutes.toString().padStart(2, "0");
    }

    function saveWorkSpan(button) {
        let row = $(button).closest("tr");
        console.log(row.find(".workspan-assignment").val());

        let data = {
            "from": row.find(".workspan-from").val(),
            "hours": row.find(".workspan-hours").val(),
            "assignment": row.find(".workspan-assignment").val(),
            "date": calendar.dateSelected.format("YYYY-MM-DD"),
        };

        $.ajax({
            url: "/attendance/api/u/{{_id}}/workspans",
            type: "post",
            data: JSON.stringify(data),
            success: function (response) {
                alert("Podařilo se!");
                location.reload();
            },
            error: ajaxError,
        });
    }

    function saveVacation() {
        let data = {
            "from": $("#vacation-from").val(),
            "to": $("#vacation-to").val()
        };

        $.ajax({
            url: "/attendance/api/u/{{_id}}/vacations",
            type: "post",
            data: JSON.stringify(data),
            success: function (response) {
                alert("Podařilo se!");
                location.reload();
            },
            error: ajaxError,
        });
    }

    function interruptVacation(button) {
        let vacationId = $(button).data("id");

        Lobibox.prompt("date", {
            "title": "Datum přerušení dovolené",
            "value": calendar.dateSelected.format("YYYY-MM-DD"),
            "buttons": {
                "ok": {
                    "text": "OK",
                },
                "cancel": {
                    "text": "Zrušit"
                }
            },
            "callback": function (lb, type) {
                if (type === "ok") {
                    let data = {};
                    data["_id"] = vacationId;
                    data["date"] = lb.getValue();

                    $.ajax({
                        url: "/attendance/api/u/{{_id}}/vacations/interrupt",
                        type: "post",
                        data: JSON.stringify(data),
                        success: function (response) {
                            alert("Podařilo se!");
                            location.reload();
                        },
                        error: ajaxError,
                    });
                }
            }
        });
    }

    function deleteWorkspan(button) {
        let workspanId = $(button).data("id");

        $.ajax({
            url: "/attendance/api/u/{{_id}}/workspans/delete",
            type: "post",
            data: workspanId,
            success: function (response) {
                alert("Podařilo se!");
                location.reload();
            },
            error: ajaxError,
        });
    }

    function closeMonth() {
        let monthIso = calendar.monthShown.format("YYYY-MM-DD");

        Lobibox.alert("info", {
            msg: 'Uzavřít měsíc?',
            buttons: {
                yes: {
                    class: "btn",
                    text: "Ano",
                    closeOnClick: true,
                },
                no: {
                    class: "btn",
                    text: "Ne",
                    closeOnClick: true,
                }
            },
            callback: function (lobibox, type) {
                if (type === "yes") {
                    $.ajax({
                        url: "/attendance/api/u/{{_id}}/close_month",
                        type: "post",
                        data: monthIso,
                        success: function (response) {
                            alert("Podařilo se!");
                            location.reload();
                        },
                        error: ajaxError,
                    });
                }
            }
        });
    }

    function ajaxError(jqXHR, textStatus, errorThrown) {
        let legibleError = decodeURIComponent(escape(errorThrown));
        console.log(textStatus, legibleError);
        Lobibox.alert("error", {msg: legibleError, title: "Chyba"})
    }
</script>

<script>
    const modalHtmlStr = `
<div class="modal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"></h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Zrušit</button>
                <button type="button" class="btn btn-primary">Uložit</button>
            </div>
        </div>
    </div>
</div>`;

    const monthFormHtmlStr = `
<form>
    <div class="form-row">
        <div class="col-2"></div>
        <div class="col-3">
            <label>Hodiny</label>
        </div>
        <div class="col-7">
            <label>Projekt</label>
        </div>
    </div>
</form>
`;

    const monthFormRowHtmlStr = `
<div class="form-row day">
    <div class="col-1 day-number">
        7.
    </div>
    <div class="col-1 day-name">
        Čt
    </div>
    <div class="form-group col-3">
        <input type="number" min="0" max="12" step="0.5" name="hours" class="form-control form-control-sm hours">
    </div>
    <div class="form-group col-7">
        <select class="form-control form-control-sm" name="assignment">
            <option value="hm">Pracovat</option>
        </select>
    </div>
</div>
`;

    const monthFormTotalRowHtmlStr = `
<div class="form-row">
    <div class="col-2">
        Celkem
    </div>
    <div class="col-10 total-hours">

    </div>
</div>
    `

    // https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518
    function htmlToElement(html) {
        const template = document.createElement('template');
        html = html.trim();
        template.innerHTML = html;
        return template.content.firstChild;
    }

    function buildMonthFormRow(day, hours, isVacation) {
        let formRow = htmlToElement(monthFormRowHtmlStr);

        formRow.setAttribute("data-date", day.format("YYYY-MM-DD"));

        formRow.querySelector("div.day-number").textContent = day.date();
        formRow.querySelector("div.day-name").textContent = day.format("ddd");

        let hoursInput = formRow.querySelector('input[name="hours"]');
        let assignmentSelect = formRow.querySelector('select[name="assignment"]');

        if (typeof hours != "undefined")
            hoursInput.setAttribute("placeholder", hours);

        if (isVacation) {
            hoursInput.disabled = true;
            assignmentSelect.disabled = true;
        }

        return formRow;
    }

    /**
     * workdays je ve formátu [{"<iso-datum>": <odpracované hodiny>, ...}
     * vacations je ve formátu ["<iso-datum>", ...]
     */
    function buildMonthForm(workdays, vacations) {
        let form = htmlToElement(monthFormHtmlStr);

        for (const day of Array(calendar.monthShown.daysInMonth()).keys()) {
            let rowDate = calendar.monthShown.date(day + 1);
            let rowDateIsoStr = rowDate.format("YYYY-MM-DD");
            let hoursWorked = workdays[rowDateIsoStr];
            let isVacation = vacations.indexOf(rowDateIsoStr) >= 0;
            form.appendChild(buildMonthFormRow(rowDate, hoursWorked, isVacation));
        }

        form.appendChild(htmlToElement(monthFormTotalRowHtmlStr));

        $(form).find("input").change(inputsChangeTotalHoursHandler);

        return form;
    }

    function inputsChangeTotalHoursHandler() {
        console.log("change");
        // TODO rozmyslet si jestli to nejde dělat aniž by při každé změně znovu běžela query
        let inputs = Array.from(document.querySelectorAll("div.modal input.hours"));
        let sum = inputs.reduce((accumulator, currentValue) => {
            if (currentValue.value) {
                return accumulator + Number(currentValue.value);
            } else {
                return accumulator + Number(currentValue.placeholder);
            }
        }, 0);

        $("div.modal div.total-hours").text(sum);
    }

    function showMonthModal() {
        // TODO je potřeba v kalendáři mít přístup i k assignmentům
        if (calendar.workdays === null || calendar.vacations === null) {
            Lobibox.alert("error", {"msg": "Ještě nebyly načteny data o tomto měsíci. Zkuste to znovu."});
            return;
        }

        const modal = htmlToElement(modalHtmlStr);

        modal.querySelector(".modal-header h5").textContent = "Editor odpracovaných hodin";

        modal.querySelector(".modal-body").appendChild(buildMonthForm(calendar.workdays, calendar.vacations));

        modal.querySelector("button.btn-primary").addEventListener("click", () => {
            const form = modal.querySelector("form");

            saveMonthForm(form);
        });

        document.body.appendChild(modal);

        const $modal = $(modal);
        $modal.one("hidden.bs.modal", function (e) {
            modal.parentNode.removeChild(modal);
        });

        $modal.modal("show");
        inputsChangeTotalHoursHandler();
    }

    function saveMonthForm(form) {
        const rows = form.querySelectorAll("div.day");
        let data = [];

        for (let row of rows) {
            const hours = parseFloat(row.querySelector('input[name="hours"]').value);
            const assignment = row.querySelector('select[name="assignment"]').value;

            if (!isNaN(hours)) {
                data.push({
                    date: row.getAttribute("data-date"),
                    hours: hours,
                    assignment: assignment
                })
            }
        }

        $.ajax({
            url: "/attendance/api/u/{{_id}}/workspans/month",
            type: "post",
            data: JSON.stringify(data),
            success: function (response) {
                alert("Podařilo se!");
                let modal = document.querySelector("div.modal.show");
                if (modal) {
                    $(modal).modal("hide");
                }
                calendar.populateCalendar();
                updateMonthInfoTable();
            },
            error: ajaxError,
        });
    }
</script>

{% end %}{# block body#}